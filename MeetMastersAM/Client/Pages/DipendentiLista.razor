@page "/dipendentilista"
@inject HttpClient Client
@inject NavigationManager navigation
@using MeetMastersAM.Shared.Model
@using MeetMastersAM.Client.Shared



@if (!isAdd)
{
    <div>
        <ListaDipendenti listaDipendente="_dipendenti" OnCrea="() => isAdd = true" OnElimina="EliminaDipendente" OnModifica="ModificaDipendente" />
    </div>
}
else
{
    <h2>@TitlePage Dipendente</h2>
    <div class="row">
        <DettagliDipendente dipendenti="DipendenteCorrente" Sedi="_sedi" OnSalva="() => SalvaDipendente(DipendenteCorrente)" OnAnnulla="AnnullaOperazione" Title="TitlePage" dipendenteId="_dipendenteId" />
    </div>
}

@code {
    private List<Dipendenti>? _dipendenti = new();
    private List<Sedi>? _sedi = new();
    public int _dipendenteId { get; set; }
    public Dipendenti? DipendenteCorrente = new();
    private bool isAdd;
    protected string TitlePage = "Aggiungi";

    public List<Dipendenti> ListaDipendenti { get; set; } = new List<Dipendenti>();

    public List<Sedi> ListaSedi { get; set; } = new List<Sedi>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetDipendenti();
        await GetSedi();
    }

    public async Task GetDipendenti()
    {
        _dipendenti = await Client.GetFromJsonAsync<List<Dipendenti>>("api/dipendenti/details");
    }

    public async Task GetSedi()
    {
        _sedi = await Client.GetFromJsonAsync<List<Sedi>>("api/Sedi/lista");
    }

    public async Task<Dipendenti> GetDipendente(int id)
    {
        return await Client.GetFromJsonAsync<Dipendenti>($"api/dipendenti/{id}");
    }



    public async Task SalvaDipendente(Dipendenti dipendente)
    {

        if (dipendente.DipendenteId == 0)
        {
            // Aggiungi il nuovo dipendente
            await Client.PostAsJsonAsync("api/dipendenti/aggiungi", dipendente);
        }
        else
        {
            await Client.PutAsJsonAsync($"api/dipendenti/modifica/{dipendente.DipendenteId}", dipendente);
            // Aggiorna i dati del dipendenteDaModificare
        }
        dipendente = new Dipendenti();
        isAdd = false;
        await GetDipendenti();
        await GetSedi();
        DipendenteCorrente = new();

    }

    public async Task AnnullaOperazione()
    {
        await Task.Delay(0); // Puoi rimuovere questa riga se l'operazione non è asincrona
        this.DipendenteCorrente = null!;
    }

    public async Task EliminaDipendente(int id)
    {
        await Client.DeleteAsync($"api/dipendenti/{id}");
        await GetDipendenti();
    }

    public async Task ModificaDipendente(int id)
    {
        DipendenteCorrente = await GetDipendente(id);
        isAdd = true;
    }
}

