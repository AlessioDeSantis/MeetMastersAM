@page "/creaoggetti"
@using MeetMastersAM.Shared.Model
@inject HttpClient Client


<h3>Crea Oggetti</h3>

<div class="my-3">
    <Accordion>
        <AccordionItem Title="Aggiungi Mansione" Class="p-2">
            <Content>
                <div class="row shadow border">
                    <div class="col-6 border-end pt-2">
                        <AggiungiMansioni mansione="MansioneCorrente" OnSalva="() => SalvaMansioni(MansioneCorrente)" />
                    </div>
                    <div class="col-6 p-2">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th class="col-10">Mansione</th>
                                    <th>Azioni</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if(visibleMansioni != null)
                                {
                                    @foreach (var mansioni in visibleMansioni)
                                    {
                                        <tr class="mb-2">
                                            <td>@mansioni!.NomeMansione</td>
                                            <td class="align-items-end">
                                                <button class="btn text-warning" @onclick="() => ModificaMansioneAsync(mansioni.MansioneId)">
                                                    <i class="fa-solid fa-gear"></i>
                                                </button>
                                                <button class="btn text-danger" @onclick="() => EliminaMansione(mansioni.MansioneId)">
                                                    <i class="fa-solid fa-circle-xmark"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        @* Pagination *@
                        <div class="pagination-container text-center">
                            <button class="btn text-primary" disabled="@IsFirstPage" @onclick="GoToPreviousPage"><i class="fa-solid fa-circle-left"></i></button>
                            <button class="btn text-primary" disabled="@IsLastPage" @onclick="GoToNextPage"><i class="fa-solid fa-circle-right"></i></button>
                        </div>

                    </div>
                </div>
            </Content>
        </AccordionItem>
        <AccordionItem Title="Accordion Item #2">
            <Content>
                <b>This is the second item's accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.
            </Content>
        </AccordionItem>
        <AccordionItem Title="Accordion Item #3">
            <Content>
                <b>This is the third item's accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.
            </Content>
        </AccordionItem>
    </Accordion>
</div>


@code {
    public Mansioni? MansioneCorrente = new();

    public List<Mansioni>? _mansioni = new List<Mansioni>();

    //Pagination
    private int currentPage = 1;
    private int pageSize = 3;   // Dimensione delle pagine
    private int totalItems;
    private List<Mansioni>? visibleMansioni;

    //Pagination navigazione tra pagine
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == TotalPages;

    private int TotalPages => (int)Math.Ceiling((double)totalItems / pageSize);


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetMansioni();

    }

    public async Task GetMansioni()
    {
        _mansioni = await Client.GetFromJsonAsync<List<Mansioni>>("api/mansioni/details");
        //Pagination
        totalItems = _mansioni!.Count;
        UpdateVisibleMansioni();
    }

    //Pagination
    private void UpdateVisibleMansioni()
    {
        int startIdx = (currentPage - 1) * pageSize;
        visibleMansioni = _mansioni!.Skip(startIdx).Take(pageSize).ToList();
    }

    private void GoToPreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdateVisibleMansioni();
        }
    }

    private void GoToNextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdateVisibleMansioni();
        }
    }
    //Fine metodi pagination


    public async Task<Mansioni> GetMansione(int id)
    {
        var result = await Client.GetFromJsonAsync<Mansioni>($"api/mansioni/{id}");
        return result ?? new Mansioni();
    }

    public async Task SalvaMansioni(Mansioni mansione)
    {
        @if (mansione.MansioneId == 0)
        {
            await Client.PostAsJsonAsync("api/mansioni/aggiungi", mansione);
        }
        else
        {
            await Client.PutAsJsonAsync($"api/mansioni/modifica/{mansione.MansioneId}", mansione);
        }
        mansione = new Mansioni();
        await GetMansioni();
        MansioneCorrente = new();
    }

    public async Task EliminaMansione(int id)
    {
        await Client.DeleteAsync($"api/mansioni/{id}");
        await GetMansioni();
    }

    public async Task ModificaMansioneAsync(int id)
    {
        MansioneCorrente = await GetMansione(id);
    }


}
