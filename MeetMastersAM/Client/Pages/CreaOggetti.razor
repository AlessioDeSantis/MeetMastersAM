@page "/creaoggetti"
@using MeetMastersAM.Shared.Model
@inject HttpClient Client


<h3 class="mb-3">Gestisci elementi <i class="fa-solid fa-gears"></i></h3>

<div class="my-5">
    <Accordion Class="shadow">
        <AccordionItem Title="Mansioni">
            <Content>
                <div class="row shadow border">
                    <div class="col-6 border-end pt-2">
                        <AggiungiMansioni mansione="MansioneCorrente" OnSalva="() => SalvaMansioni(MansioneCorrente)" />
                    </div>
                    <div class="col-6 p-2">
                        <table class="table table-striped">
                            <thead class="bg-navy text-white">
                                <tr>
                                    <th class="col-10">Mansione</th>
                                    <th>Azioni</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if(visibleMansioni != null)
                                {
                                    @foreach (var mansioni in visibleMansioni)
                                    {
                                        <tr class="mb-2">
                                            <td>@mansioni!.NomeMansione</td>
                                            <td class="align-items-end">
                                                <button class="btn text-warning" @onclick="() => ModificaMansioneAsync(mansioni.MansioneId)">
                                                    <i class="fa-solid fa-gear"></i>
                                                </button>
                                                <button class="btn text-danger" @onclick="() => EliminaMansione(mansioni.MansioneId)">
                                                    <i class="fa-solid fa-circle-xmark"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        @* Pagination *@
                        <div class="pagination-container text-center">
                            <button class="btn text-primary" disabled="@IsFirstPage" @onclick="PreviousPageMansioni"><i class="fa-solid fa-circle-left"></i></button>
                            <button class="btn text-primary" disabled="@IsLastPage" @onclick="NextPageMansioni"><i class="fa-solid fa-circle-right"></i></button>
                        </div>

                    </div>
                </div>
            </Content>
        </AccordionItem>
        <AccordionItem Title="Benefits">
            <Content>
                <div class="row shadow border">
                    <div class="col-6 border-end pt-2">
                        <AggiungiBenefits benefit="BenefitCorrente" OnSalva="() => SalvaBenefits(BenefitCorrente)" />
                    </div>
                    <div class="col-6 p-2">
                        <table class="table table-striped">
                            <thead class="bg-navy text-white">
                                <tr>
                                    <th class="col-10">Benefit</th>
                                    <th>Azioni</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (visibleBenefits != null)
                                {
                                    @foreach (var benefit in visibleBenefits)
                                    {
                                        <tr class="mb-2">
                                            <td>@benefit!.DescrizioneBenefit</td>
                                            <td class="align-items-end">
                                                <button class="btn text-warning" @onclick="() => ModificaBenefitsAsync(benefit!.BenefitId)">
                                                    <i class="fa-solid fa-gear"></i>
                                                </button>
                                                <button class="btn text-danger" @onclick="() => EliminaBenefit(benefit!.BenefitId)">
                                                    <i class="fa-solid fa-circle-xmark"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        @* Pagination *@
                        <div class="pagination-container text-center">
                            <button class="btn text-primary" disabled="@IsFirstPage" @onclick="PreviousPageBenefits"><i class="fa-solid fa-circle-left"></i></button>
                            <button class="btn text-primary" disabled="@IsLastPage" @onclick="NextPageBenefits"><i class="fa-solid fa-circle-right"></i></button>
                        </div>

                    </div>
                </div>

            </Content>
        </AccordionItem>
        <AccordionItem Title="Skills">
            <Content>
                <div class="row shadow border">
                    <div class="col-6 border-end pt-2">
                        <AggiungiSkills skill="SkillCorrente" OnSalva="() => SalvaSkills(SkillCorrente!)" />
                    </div>
                    <div class="col-6 p-2">
                        <table class="table table-striped">
                            <thead class="bg-navy text-white">
                                <tr>
                                    <th></th>
                                    <th>Skill</th>
                                    <th>Tipo</th>
                                    <th>Azioni</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (visibleSkills != null)
                                {
                                    @foreach (var skill in visibleSkills)
                                    {
                                        <tr class="mb-2">
                                            <td>@if (skill!.Attivo)
                                                {
                                                    <p class="text-primary"><i class="fa-solid fa-toggle-on"></i></p>
                                                }
                                                else
                                                {
                                                    <i class="fa-solid fa-toggle-off"></i>
                                                }
                                            </td>
                                            <td>@skill!.DescrizioneSkill</td>
                                            <td>@skill!.TipoSkill</td>
                                            <td class="align-items-end">
                                                <button class="btn text-warning" @onclick="() => ModificaSkillsAsync(skill!.SkillId)">
                                                    <i class="fa-solid fa-gear"></i>
                                                </button>
                                                <button class="btn text-danger" @onclick="() => EliminaSkill(skill!.SkillId)">
                                                    <i class="fa-solid fa-circle-xmark"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        @* Pagination *@
                        <div class="pagination-container text-center">
                            <button class="btn text-primary" disabled="@IsFirstPage" @onclick="PreviousPageSkills"><i class="fa-solid fa-circle-left"></i></button>
                            <button class="btn text-primary" disabled="@IsLastPage" @onclick="NextPageSkills"><i class="fa-solid fa-circle-right"></i></button>
                        </div>

                    </div>
                </div>

            </Content>

        </AccordionItem>
    </Accordion>
</div>


@code {
    //Mansioni
    public Mansioni? MansioneCorrente = new();
    public List<Mansioni>? _mansioni = new List<Mansioni>();
    //Benefits
    public Benefits? BenefitCorrente = new();
    public List<Benefits>? _benefits = new List<Benefits>();
    //Skills
    public Skills? SkillCorrente = new();
    public List<Skills>? _skills = new List<Skills>();

    //Pagination
    private int currentPage = 1;
    private int pageSize = 3;   // Dimensione delle pagine
    private int totalItems;
    private List<Mansioni>? visibleMansioni;
    private List<Benefits>? visibleBenefits;
    private List<Skills>? visibleSkills;

    //Pagination navigazione tra pagine
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == TotalPages;

    private int TotalPages => (int)Math.Ceiling((double)totalItems / pageSize);


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetMansioni();
        await GetBenefits();
        await GetSkills();
    }

    //Get
    public async Task GetMansioni()
    {
        _mansioni = await Client.GetFromJsonAsync<List<Mansioni>>("api/mansioni/details");
        //Pagination
        totalItems = _mansioni!.Count;
        UpdateVisibleMansioni();
    }

    public async Task GetBenefits()
    {
        _benefits = await Client.GetFromJsonAsync<List<Benefits>>("api/benefits/details");
        //Pagination
        totalItems = _benefits!.Count;
        UpdateVisibleBenefits();
    }

    public async Task GetSkills()
    {
        _skills = await Client.GetFromJsonAsync<List<Skills>>("api/skill/details");
        //Pagination
        totalItems = _benefits!.Count;
        UpdateVisibleSkills();
    }

    //Pagination
    private void UpdateVisibleMansioni()
    {
        int startIdx = (currentPage - 1) * pageSize;
        visibleMansioni = _mansioni!.Skip(startIdx).Take(pageSize).ToList();
    }

    private void PreviousPageMansioni()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdateVisibleMansioni();
        }
    }

    private void NextPageMansioni()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdateVisibleMansioni();
        }
    }

    private void UpdateVisibleBenefits()
    {
        int startIdx = (currentPage - 1) * pageSize;
        visibleBenefits = _benefits!.Skip(startIdx).Take(pageSize).ToList();
    }

    private void PreviousPageBenefits()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdateVisibleBenefits();
        }
    }

    private void NextPageBenefits()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdateVisibleBenefits();
        }
    }

    private void UpdateVisibleSkills()
    {
        int startIdx = (currentPage - 1) * pageSize;
        visibleSkills = _skills!.Skip(startIdx).Take(pageSize).ToList();
    }

    private void PreviousPageSkills()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdateVisibleSkills();
        }
    }

    private void NextPageSkills()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdateVisibleSkills();
        }
    }

    //Fine metodi pagination


    //Get by Id
    public async Task<Mansioni> GetMansione(int id)
    {
        var result = await Client.GetFromJsonAsync<Mansioni>($"api/mansioni/{id}");
        return result ?? new Mansioni();
    }

    public async Task<Benefits> GetBenefit(int id)
    {
        var result = await Client.GetFromJsonAsync<Benefits>($"api/benefits/{id}");
        return result ?? new Benefits();
    }

    public async Task<Skills> GetSkill(int id)
    {
        var result = await Client.GetFromJsonAsync<Skills>($"api/skill/{id}");
        return result ?? new Skills();
    }

    //Salva e aggiorna oggetti
    public async Task SalvaMansioni(Mansioni mansione)
    {
        @if (mansione.MansioneId == 0)
        {
            await Client.PostAsJsonAsync("api/mansioni/aggiungi", mansione);
        }
        else
        {
            await Client.PutAsJsonAsync($"api/mansioni/modifica/{mansione.MansioneId}", mansione);
        }
        mansione = new Mansioni();
        await GetMansioni();
        MansioneCorrente = new();
    }

    public async Task SalvaBenefits(Benefits benefit)
    {
        @if(benefit.BenefitId == 0)
        {
            await Client.PostAsJsonAsync("api/benefits/aggiungi", benefit);
        }
        else
        {
            await Client.PutAsJsonAsync($"api/benefits/modifica/{benefit.BenefitId}", benefit);
        }
        benefit = new Benefits();
        await GetBenefits();
        BenefitCorrente = new();
    }

    public async Task SalvaSkills(Skills skill)
    {
        @if(skill.SkillId == 0)
        {
            await Client.PostAsJsonAsync("api/skill/aggiungi", skill);
        }
        else
        {
            await Client.PutAsJsonAsync($"api/skill/modifica/{skill.SkillId}", skill);
        }
        skill = new Skills();
        await GetSkills();
        SkillCorrente = new();
    }

    //Elimina Elemento
    public async Task EliminaMansione(int id)
    {
        await Client.DeleteAsync($"api/mansioni/{id}");
        await GetMansioni();
    }

    public async Task EliminaBenefit(int id)
    {
        await Client.DeleteAsync($"api/benefits/{id}");
        await GetBenefits();
    }

    public async Task EliminaSkill(int id)
    {
        await Client.DeleteAsync($"api/skill/{id}");
        await GetSkills();
    }


    //Modifica Elemento
    public async Task ModificaMansioneAsync(int id)
    {
        MansioneCorrente = await GetMansione(id);
    }

    public async Task ModificaBenefitsAsync(int id)
    {
        BenefitCorrente = await GetBenefit(id);
    }

    public async Task ModificaSkillsAsync(int id)
    {
        SkillCorrente = await GetSkill(id);
    }


}
